#!/usr/bin/env bash

#HMR_BASE="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
HMR_BASE=/opt/hummerrisk

. "${HMR_BASE}/scripts/utils.sh"

action=${1-}
target=${2-}
args=("$@")

function check_config_file() {
  if [[ ! -f "${CONFIG_FILE}" ]]; then
    echo " 'Configuration file not found': ${CONFIG_FILE}"
    echo "'Please install it first'"
    return 3
  fi
#  if [[ ! -f .env ]]; then
#    ln -s "${CONFIG_FILE}" .env
#  fi
}

function pre_check() {
  check_config_file || return 3
}

function usage() {
  echo "hummerrisk Deployment Management Script"
  echo
  echo "Usage: "
  echo "  hrctl [COMMAND] [ARGS...]"
  echo "  hrctl --help"
  echo
  echo "Installation Commands: "
  echo "  status     Status    hummerrisk"
  echo "  upgrade    Upgrade   hummerrisk"
  echo "  reconfig   Reconfig  hummerrisk"
  echo
  echo "Management Commands: "
  echo "  start      Start     hummerrisk"
  echo "  stop       Stop      hummerrisk"
  echo "  down       Down      hummerrisk"
  echo "  restart    Restart   hummerrisk"
  echo "  uninstall  Uninstall hummerrisk"
  echo
  echo "More Commands: "
  echo "  version            View hummerrisk version"
  echo "  load_image         Loading docker image"
  echo "  backup_db          Backup database"
  echo "  restore_db [file]  Data recovery through database backup file"
  echo
}

function service_to_docker_name() {
  service=$1
  if [[ "${service:0:3}" != "hr" ]]; then
    service=hr_${service}
  fi
  echo "${service}"
}

EXE=""

function stop() {
  if [[ -n "${target}" ]]; then
    ${EXE} stop "${target}" && ${EXE} rm -f "${target}"
    return
  fi
  services=$(get_docker_compose_services ignore_db)
  for i in ${services}; do
    ${EXE} stop "${i}"
  done
  for i in ${services}; do
    ${EXE} rm -f "${i}" >/dev/null
  done
}

function close() {
  if [[ -n "${target}" ]]; then
    ${EXE} stop "${target}"
    return
  fi
  services=$(get_docker_compose_services ignore_db)
  for i in ${services}; do
    ${EXE} stop "${i}"
  done
}

function pull() {
   if [[ -n "${target}" ]]; then
    ${EXE} pull "${target}"
    return
  fi
  ${EXE} pull
}

function check_xpack_exe() {
    EXE=$(get_docker_compose_cmd_line)
    if docker exec -it hmr-auth sh -c 'curl http://system:9300/license' &> /dev/null;then
      if [[ $(docker exec -it hmr-auth sh -c 'curl http://system:9300/license') =~ 'true' ]];then
        EXE+=" -f  ${HMR_BASE}/compose/docker-compose-xpack.yml"
      fi
    fi
    echo $EXE
}

function start() {
    `check_xpack_exe` up -d
    for (( i = 0; i < 6; i++ )); do
      sleep 30
      if docker exec -it hmr-auth sh -c 'curl http://system:9300/license' &> /dev/null;then
        local result=$(docker exec -it hmr-auth sh -c 'curl http://system:9300/license')
        if [[  "$result" =~ 'true' ]];then
          `check_xpack_exe` up -d;break
        elif [[ "$result" =~ 'false' ]]; then
          break
        else
          continue
        fi
      fi
    done
}

function main() {
  if [[ "${action}" == "help" || "${action}" == "h" || "${action}" == "-h" || "${action}" == "--help" ]]; then
    echo ""
  elif [[ "${action}" == "install" || "${action}" == "reconfig" ]]; then
    echo ""
  else
    pre_check || return 3
    EXE=`check_xpack_exe`
  fi
  case "${action}" in
    install)
      bash "${SCRIPT_DIR}/4_install_hummerrisk.sh"
      ;;
    upgrade)
      bash "${SCRIPT_DIR}/7_upgrade.sh" "$target"
      ;;
    reconfig)
      ${EXE} down -v
      bash "${SCRIPT_DIR}/1_config_hummerrisk.sh"
      ;;
    start)
      start
      ;;
    restart)
      stop
      start
      ;;
    stop)
      stop
      ;;
    pull)
#      pull
      bash "${SCRIPT_DIR}/4_load_images.sh"
      ;;
    close)
      close
      ;;
    status)
      ${EXE} ps
      ;;
    down)
      if [[ -z "${target}" ]]; then
        ${EXE} down -v
      else
        ${EXE} stop "${target}" && ${EXE} rm -f "${target}"
      fi
      ;;
    uninstall)
      bash "${SCRIPT_DIR}/8_uninstall.sh"
      ;;
    backup_db)
      bash "${SCRIPT_DIR}/5_db_backup.sh"
      ;;
    restore_db)
      bash "${SCRIPT_DIR}/6_db_restore.sh" "$target"
      ;;
    load_image)
      bash "${SCRIPT_DIR}/4_load_images.sh"
      ;;
    cmd)
      echo "${EXE}"
      ;;
    tail)
      if [[ -z "${target}" ]]; then
        ${EXE} logs --tail 100 -f
      else
        docker_name=$(service_to_docker_name "${target}")
        docker logs -f "${docker_name}" --tail 100
      fi
      ;;
    exec)
      docker_name=$(service_to_docker_name "${target}")
      docker exec -it "${docker_name}" sh
      ;;
    show_services)
      get_docker_compose_services
      ;;
    raw)
      ${EXE} "${args[@]:1}"
      ;;
    version)
      get_current_version
      ;;
    help)
      usage
      ;;
    --help)
      usage
      ;;
    -h)
      usage
      ;;
    *)
      echo "No such command: ${action}"
      usage
      ;;
    esac
}

main "$@"
